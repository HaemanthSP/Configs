" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\ | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set hlsearch    " Highlights all the search matches
set smartcase		" Do smart case matching
set colorcolumn=79
set nu			" Show line number
set incsearch		" Incremental search
set autoindent
set tabstop=2
set shiftwidth=2
set expandtab
set hidden  " Enables UNDO operation in Buffers
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Pathogen load
"filetype off
"
" execute pathogen#infect()
" call pathogen#infect()
" call pathogen#helptags()

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'Valloric/YouCompleteMe'  " Auto complete
Plugin 'flazz/vim-colorschemes'
Plugin 'scrooloose/nerdtree'     " Folder Navigation
Plugin 'vim-syntastic/syntastic'  " Syntax checker
Plugin 'nvie/vim-flake8'         " Pep8
" Plugin 'dracula/vim'  " Dracula theme

call vundle#end()

filetype on
filetype plugin on
filetype plugin indent on
syntax on

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"-----------------Flake8----------------
let g:flake8_show_in_gutter=1  " Show signs in the gutter 
let g:flake8_show_in_file=1  " Show markers in file
" let g:flake8_show_quickfix=1  " Show quick fix window

" Auto run flake8
autocmd BufWritePost *.py call Flake8()


"-----------------Syntastic---------------------------
let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=1
let g:syntastic_python_checkers = ['pycodestyle']
let g:syntastic_python_flake8_args='--ignore=,E501'

"----------Added for highlighting extra spaces--------------
let c_space_errors = 1
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"


"-----Added for Highlighting spelling mistakes in comments-----
autocmd BufRead,BufNewFile *.py setlocal spell
set spell spelllang=en_us
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=red

"--------------Added for Color scheme----------------
" let g:solarized_termcolors=16 | 256
" let g:solarized_termtrans=0 | 1
" let g:solarized_degrade=0 | 1
" let g:solarized_bold=1 | 0
" let g:solarized_underline=1 | 0
" let g:solarized_italic=1 | 0
" let g:solarized_contrast="high" | "high" or "low"
" let g:solarized_visibility="normal" | "high" or "low"

"---For Italic fonts-----
set t_ZH=[3m
set t_ZR=[23m

syntax enable
" set background=dark
set term=screen-256color
colorscheme molokai
highlight ColorColumn ctermbg=grey

"----- For Syntastic ------
" let g:syntastic_python_checkers = ['pylint']

"----- Indent line highlighting ------
let g:indentLine_color_term = 239
let g:indentLine_indentLevel=6
let g:indentLine_enabled=1
let g:indentLine_fileType=['.py', 'c', 'cpp', 'js', '.html', '.css', 'py', 'python']
"let g:indentLine_setConceal=0
"IndentLinesReset 2

"GVim
let g:indentLine_color_gui = '#A4E57E'

" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2

"------- Vim Airline ------
let g:airline#extensions#tabline#enabled=1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_powerline_fonts = 1
set laststatus=2
let g:airline_section_z=airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
let g:airline_section_a=airline#section#create(['mode'])

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''

"------ Key Remapping ------
map <C-j> :%!python -m json.tool<CR>

inoremap <C-K> <C-\><C-O>b
inoremap <C-L> <C-\><C-O>w

"------ Vim Tmux Mapping ------
let g:tmux_navigator_no_mappings = 1

nnoremap <C-\> :TmuxNavigatePrevious<cr>

"--------- For CPP Folding -----------
autocmd BufRead,BufNewFile *.cpp,*.h  setlocal foldmethod=syntax
autocmd BufRead,BufNewFile *.cpp,*.h setlocal foldlevelstart=1
autocmd BufRead,BufNewFile *.cpp,*.h setlocal colorcolumn=100
autocmd BufRead,BufNewFile *.cpp,*.h setlocal cindent
"autocmd BufRead,BufNewFile *.cpp setlocal foldnestmax=2
"
"------------------- For py folding -----------
set foldmethod=indent   
set foldnestmax=3
" set nofoldenable
set foldlevel=1

"------- Shortcut for folding and unfolding ----------
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

"------- For YouCompleteMe -------------
" path to directory where library can be found
let g:clang_library_path='/usr/lib/llvm-3.8/lib/libclang-3.8.so.1'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_register_as_syntastic_checker = 1 "default 1
let g:Show_diagnostics_ui = 1 "default 1

let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1

let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 1 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''

let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info

let g:ycm_confirm_extra_conf = 1

let g:ycm_goto_buffer_command = 'same-buffer'
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_key_invoke_completion = ''
set completeopt-=preview

"--------- For Disabling YCM
imap <C-x> <C-y>

"---------------- For Copying to Clipboard directly ------------
set clipboard=unnamedplus

"------------- Nerd Tree shortcut -------------
map <C-n> :NERDTreeToggle<CR>
map <M-PageDown> :bn<CR>
map <M-PageUp> :bp<CR>
map <C-c> :BD<CR>
nnoremap <C-Left> <C-w>h
nnoremap <C-Right> <C-w>l
nnoremap <C-Up> <C-w>k
nnoremap <C-Down> <C-w>j

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" Start Nerd tree by typing vim
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

call NERDTreeHighlightFile('jade', 'DarkGreen', 'none', 'green', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ini', 'LightGreen', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('styl', 'DarkCyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('yml', 'LightGreen', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'DarkGreen', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('vim', 'DarkGreen', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'DarkGreen', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'DarkGreen', 'none', 'green', '#151515')
call NERDTreeHighlightFile('html', 'DarkMagenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('css', 'LightBlue', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('md', 'DarkCyan', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('ts', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('sh', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('py', 'DarkYellow', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('txt', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('org', 'Magenta', 'none', '#ff00ff', '#151515')

"-------------For Ctrl P------------
set wildignore+=*/media/*,*/__pycache__/*,*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.py.orig     " MacOSX/Linux
"map <C-p> :CtrlPTag<CR>
let g:ctrlp_extensions = ['tag']
let g:ctrlp_cmd = 'call CallCtrlP()'

func! CallCtrlP()
    if exists('s:called_ctrlp')
        CtrlPLastMode
    else
        let s:called_ctrlp = 1
        CtrlPMRU
    endif
endfunc

let g:ctrlp_custom_ignore = 'data\|build\|results'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

"--------- Shift width (Keep this always at the last ---------
set sw=2

"--------- Highlight errors in Airline -----------
let g:airline#extensions#ale#enabled = 1
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['pylint', 'flake8'],
\}
let b:ale_fixers = [
\   'remove_trailing_lines',
\   'isort',
\   'ale#fixers#generic_python#BreakUpLongLines',
\]
let g:ale_python_pylint_options = "--init-hook='import sys; sys.path.append(\".\")'"
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

"-------- For project specific vimrc ---------
set exrc
set secure

"------- For Vim iSort ---------
let g:vim_isort_map = '<C-i>'
let g:vim_isort_python_version = 'python3'

"---------- For Vim multi-cursor function -----
let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-d>'
let g:multi_cursor_select_all_word_key = '<C-f>'
let g:multi_cursor_start_key           = 'g<C-d>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-d>'
let g:multi_cursor_prev_key            = '<C-f>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

"-------- Show signcolum always -----
set signcolumn=yes
autocmd FileType tagbar,nerdtree setlocal signcolumn=no


"-------- Remap the commands to io ops to clipboard
nnoremap <C-y> "+y
vnoremap <C-y> "+y
nnoremap <C-p> "+gP
vnoremap <C-p> "+gP
